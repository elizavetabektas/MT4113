for (i in 1:9) {
summ=summ+(a[i]-9*0.18125)**2/(9*0.18125*(1-0.18125))
}
a <- c(36,38,23,10,3,1,1,0,0)
summ <- 0
for (i in 1:9) {
summ=summ+(a[i]-9*0.18125)**2/(9*0.18125*(1-0.18125))
}
summ
number <- 9*0.18125
vector <- c(36,48,38,23,10,3,1,1)
summ <- 0
for (i in 0:9) {
summ <- summ + vector[i]*(i-number)**2
}
summ
vector <- c(36,48,38,23,10,3,1,1,0,0)
summ <- 0
for (i in 0:9) {
summ <- summ + vector[i]*(i-number)**2
}
summ
qchisq(0.95,df=159)
pchisq(103.2,100)
pchisq(95,100)
ppois(280,320)
?n
?pnorm
pnorm((280.5-320)/sqrt(320))
pchisq(51.011,82)
pchisq(2.36,4)
pchisq(4.06,4)
1-pbinom(30,51,75/101)
pbinom(30,51,75/101)
pbinom(83,210,0.5)
pbinom(83,210,0.5)*2
pnorm(83.5,210*0.5,210*0.25)
?pnorm
pnorm(83.5,210*0.5,sqrt(210*0.5)
)
pnorm(-2.098)
pnorm(-2.098)*2
pbinom(83.5,210,1/3)
2*(1-pbinom(83.5,210,1/3))
(1-pbinom(83.5,210,1/3))
knitr::opts_chunk$set(echo = TRUE)
#= I use this all the time, thanks Hadley Wickham
library(tidyverse)
#= use the mcyle data in the MASS library
library(MASS)
data(mcycle)
head(mcycle)
p <- ggplot(data=mcycle) +
geom_point(aes(x=times, y=accel), col='purple', size=1.5) +
xlab('time (ms)') + ylab('acceleration') + ggtitle('A wiggly relationship') +
theme_light()
p
?ggplot
?data
?geom_point
?aes
?geom_point
# to emphasise the basis matrix - intercept and linear term.
f1Basis <- data.frame(y = mcycle$accel, x0 = 1, x1 = mcycle$times)
head(f1Basis)
?data.frame
?head
# No intercept, I've got it already
f1Fitted <- lm(y ~ . -1, data = f1Basis)
summary(f1Fitted)
f1Predicted <- f1Basis %>% mutate(yhat = fitted(f1Fitted)) %>% arrange(x1)
p + geom_line(data = f1Predicted, aes(x1, yhat), col = 'blue', alpha = 0.6)
?lm
?summary
?poly
?cbind
# a complex model
fbigFitted <- lm(accel ~ poly(times, 20), data = mcycle)
fbigPredicted <- mcycle %>% mutate(yhat = fitted(fbigFitted)) %>% arrange(times)
p + geom_line(data = fbigPredicted, aes(times, yhat), col = 'blue', alpha = 0.6)
# construct using "raw" polynomials - usually you'd use orthogonal, but those are details
f4Basis <- cbind(1, poly(mcycle$times, 4, raw = T))
head(f4Basis)
par(mfrow = c(2,3))
for(i in 1:5){
plot(mcycle$times, f4Basis[,i], xlab = "Time", ylab = "Basis value", type = 'l')
}
?poly
?par
?mfrow
?plot
?poly
?cbind
mcycle$times
poly(mcycle$times,4)
poly(mcycle$times,4,raw=T)
# fit that back to our data - several basis functions
f4Basis <- data.frame(y = mcycle$accel, f4Basis)
f4Fitted <- lm(y ~ ., data = f4Basis)
f4Predicted <- f4Basis %>% mutate(yhat = fitted(f4Fitted)) %>% arrange(X1)
p + geom_line(data = f4Predicted, aes(X1, yhat), col = 'blue', alpha = 0.6)
# make lots of f
basisList <- list()
for(i in 1:20){
basisList[[i]] <- data.frame(y = mcycle$accel, poly(mcycle$times, degree = i, raw = T))
}
# fit them all using OLS
modelList <- lapply(basisList, function(q){lm(y~., data = q)})
adjRsq <- lapply(modelList, function(q){summary(q)$adj.r.squared}) %>% unlist()
which.max(adjRsq)
bestModel <- basisList[[12]] %>% mutate(yhat = fitted(modelList[[12]])) %>% arrange(X1)
p + geom_line(data = bestModel, aes(X1, yhat), col = 'blue', alpha = 0.6)
# make lots of f
library(splines)
basisList <- list()
for(i in 1:20){
basisList[[i]] <- data.frame(y = mcycle$accel, bs(mcycle$times, df = i+2))
}
modelList <- lapply(basisList, function(q){lm(y~., data = q)})
adjRsq <- lapply(modelList, function(q){summary(q)$adj.r.squared}) %>% unlist()
which.max(adjRsq)
bestModel <- basisList[[9]] %>% mutate(yhat = fitted(modelList[[9]]))
p + geom_line(data = bestModel, aes(mcycle$times, yhat), col = 'blue', alpha = 0.6)
# create a train and validation set
set.seed(234324)
# about 60% for training
trainInd <- sample(1:nrow(mcycle), size = 80, replace = F)
trainDat <- mcycle[trainInd,]
validationDat <- mcycle[-trainInd,]
# make lots of f and fit them with OLS
error <- numeric(30)
for(i in 1:30){
currentModel <- lm(accel ~ bs(times, df = i+3, Boundary.knots = c(min(mcycle$times), max(mcycle$times))), data = trainDat)
yhat <- predict(currentModel, newdata = validationDat)
error[i] <- sum((validationDat$accel - yhat)^2)
}
plot(error, xlab = "Polynomial degree", ylab = "Validation error", type = 'b')
library(tidyverse)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_wtap(~ class, nrow=2)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_wrap(~ class, nrow=2)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_wrap(drv ~ cyl)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_wrap(drv ~ cyl)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_grid(drv ~ cyl)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_grid(. ~ cyl)
?mpg
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_grid(. ~ cty)
?mpg
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_grid(. ~ year)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_wrap( ~ year)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_grid(driv ~ .)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_grid(drv ~ .)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_grid(. ~ cyl)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy)) + facet_wrap(~ class, nrow=2)
?facet_wrap
ggplot(data=mpg) + geom_point(mapping=aes(x=displ,y=hwy))
ggplot(data=mpg) + geom_smooth(mapping=aes(x=displ,y=hwy))
ggplot(data=mpg) + geom_smooth(mapping=aes(x=displ,linetype=drv))
ggplot(data=mpg) + geom_smooth(mapping=aes(x=displ,y=hwy,linetype=drv))
ggplot(data=mpg) + geom_smooth(mapping=aes(x=displ,y=hwy,linetype=drv))+ geom_point(mapping=aes(x=displ,y=hwy))
ggplot(data=mpg, mapping=aes(x=displ,y=hwy))
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_point() + geom_smooth()
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_point(mapping= aes(colour=class) + geom_smooth()
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_point(mapping= aes(colour=class))+ geom_smooth()
?geom_line
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_line()
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_path()
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_step()
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_line()
?geom_line
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_boxplot()
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_histogram()
ggplot(data=mpg, mapping=aes(x=displ,y=hwy)) +geom_area()
?geom_smooth
ggplot()
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=drv)) +geom_point() +geom_smooth(se=FALSE)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=drv)) +geom_point() +geom_smooth()
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(data=filter(mpg,class=="suv"))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(data=filter(mpg,class=="2seater"))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth()
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, group=class)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, mappingaes(group=class)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=class))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=class)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=class)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=drv, color=class))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=drv)) +geom_point() +geom_smooth(se=FALSE))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=drv)) +geom_point() +geom_smooth(se=FALSE)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_smooth(se=FALSE)+geom_point(mapping=aes( color=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_smooth(se=FALSE, mapping=aes(linetype=drv))+geom_point(mapping=aes( color=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point(mapping=aes( color=drv))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut))
?diamonds
?stat_summary
?stat_summary
?geom_bar
?geom_area
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut))
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),fun.ymin=min,fun.ymax=max,fun.y=median)
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth))
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),fun.ymin=min,fun.ymax=max,fun.y=median)
?geom_pointrange
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),ymin=min,ymax=max)
ggplot(data=diamonds)+stat_summary(mapping=aes(x=cut,y=depth),fun.ymin=min,fun.ymax=max,fun.y=median)
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),fun.min=min,fun.max=max,fun.y=median)
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),ymin=min,ymax=max)
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut))
ggplot(data=diamonds)+geom_col(mapping=aes(x=cut))
ggplot(data=diamonds)+geom_col(mapping=aes(x=cut,y=..prop..))
ggplot(data=diamonds)+geom_col(mapping=aes(x=cut,y=depth))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=depth))
?stat_smooth
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=1))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,fill=color))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,fill=color,group=1))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=2))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=1))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=0))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..))
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar(alpha=1/5,position="identity")
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar()
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar(alpha=1/5,position="identity")
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar(fill=NA,position="identity")
ggplot(data=diamonds,mapping=aes(x=cut,color=clarity)) + geom_bar(fill=NA,position="identity")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="fill")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_point()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
?position_jitter
?geom_jitter
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter(width=0.01)
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter(width=0.1)
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter(width=0.4)
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_count()
?geom_boxplot
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge2")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=diamonds) + geom_boxplot(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=diamonds) + geom_boxplot(mapping=aes(x=cut,fill=clarity),position="dodge2")
ggplot(data=diamonds) + geom_boxplot(mapping=aes(x=cut),position="dodge2")
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot()
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot(position="dodge")
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot(position="dodge2")
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot() +coord_flip()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + coord_flip()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + facet_wrap(~clarity)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + facet_wrap(~clarity) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = clarity)) + facet_wrap(~clarity) + coord_polar()
?labs()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + labs(title="The title of this graph")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + labs(title="The title of this graph") + xlab("Diamond Cut")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + labs(title="The title of this graph") + xlab("Diamond Cut") + ylab("Y AXISSSS")
?coord_quickmao
?coord_quickmap
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_jitter() + geom_abline()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline() + coord_fixed()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_jitter() + geom_abline()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline() + coord_fixed()
?coord_fixed
?geom_abline
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_abline() + coord_fixed()
?geom_abline
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline() + coord_fixed()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline(2) + coord_fixed()
>pie
?pie
this_is_a_really_long_name <- 2.5
this_is_a_really_long_name
this_is_also <- 5
this_is_a_really_long_name <- 3.5
library(tidyverse)
library(nycflights13)
library(nycflights13)
install.packages(nycflights13)
install.package(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
install.packages("shiny")
setwd("~/Desktop/MT4113")
# Plot
library(tidyverse)
############################ Exercise 1 #######################################
# used preallocation to make it more efficient
P_function <- function(w){
n = length(w)
P <- rep(0, times=n)
for (i in 1:n){
if (w[i] < 3.5 | w[i] > 25) {
P[i] <- 0
} else if (w[i]<=14){
P[i] <- exp(-2.13974*exp(-0.633*w[i]))
} else if (w[i]<=25){
P[i] <- 1
} else {
P[i] <- 0
}
}
return(P)
}
# Plot
library(tidyverse)
w <- seq(0, 40, 0.01)
p <- P_function(w)
plt1 <- ggplot(aes(x=w, y=p)) + geom_line() + xlab("Wind speed (knots)") + ylab("% of total kilowatts")
plt1
df1 <- data.frame(wind_speed = w, power = p)
plt1 <- df1 %>% ggplot(aes(x=wind_speed, y=power)) + geom_line() + xlab("Wind speed (knots)") + ylab("% of total kilowatts")
plt1
dat <- read.csv("WindData.csv")$speed
dat
dat <- read.csv("WindData.csv")$speed
dat <- read.csv("Practical1/WindData.csv")$speed
dat
dat <- read.csv("Practical1/WindData.csv")
dat
?hist
# simulate values and plot histogram on probability density scale
plt2 <- ggplot(dat, aes(x=speed)) + geom_histogram() + geom_line() + xlab=('Hourly wind speeds (knots)') + ylab('Probability Density')
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_histogram(dat, aes(x=speed)) + geom_line() +
xlab=('Hourly wind speeds (knots)') + ylab('Probability Density')
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_histogram(dat, aes(x=speed)) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
?geom_histogram
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_histogram(dat, aes(speed)) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_histogram(dat, mapping = aes(x=speed)) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
df2 <- data.frame(gr = seq(0, 40, 0.01), dw = dweibull(gr, shape=1.679, scale=10.128))
df2 <- data.frame(gr <- seq(0, 40, 0.01), dw = dweibull(gr, shape=1.679, scale=10.128))
df2
gr <- seq(0, 40, 0.01)
df2 <- data.frame(gr = gr, dw = dweibull(gr, shape=1.679, scale=10.128))
df2
plt2 <- plt2 + geom_line(df2, aes(x=gr, y=dw))
plt2 <- plt2 + geom_line(df2, mapping = aes(x=gr, y=dw))
plt2
gr <- seq(0, 40, 0.01)
df2 <- data.frame(grid = gr, dw = dweibull(gr, shape=1.679, scale=10.128))
plt2 <- plt2 + geom_line(df2, mapping = aes(x=grid, y=dw))
plt2
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_histogram(dat, mapping = aes(x=speed)) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
plt2
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_histogram(dat, mapping = aes(x=speed), col = 'white') + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
plt2
gr <- seq(0, 40, 0.01)
dw <- dweibull(gr, shape=1.679, scale=10.128)
df2 <- data.frame(grid = gr, dweibul = dw)
plt2 <- plt2 + geom_line(df2, mapping = aes(x=grid, y=dweibul))
plt2
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_density(dat, mapping = aes(x=speed), col = 'white', ) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
plt2
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + stat_density(dat, mapping = aes(x=speed), col = 'white', ) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
plt2
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + stat_density(dat, mapping = aes(x=speed) ) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
plt2
# simulate values and plot histogram on probability density scale
plt2 <- ggplot() + geom_histogram(dat, mapping = aes(x=speed, y = ..density..) ) + geom_line() +
xlab('Hourly wind speeds (knots)') + ylab('Probability Density')
plt2
gr <- seq(0, 40, 0.01)
dw <- dweibull(gr, shape=1.679, scale=10.128)
df2 <- data.frame(grid = gr, dweibul = dw)
plt2 <- plt2 + geom_line(df2, mapping = aes(x=grid, y=dweibul))
plt2
?gamma
?runif
source('~/Desktop/MT4113/Practical1/Practical 1.R')
source('~/Desktop/MT4113/Practical1/Practical 1.R')
source('~/Desktop/MT4113/Practical1/Practical 1.R')
power_of_samples
mean(power_of_samples)
mean(power_of_samples)
# Function
rejectSample <- function(n, k, lambda) {
# determine bound of box to sample in
mean <- lambda * gamma(1 + 1/k)
sd <- lambda * sqrt(gamma(1 + 2/k) - gamma(1 + 1/k)^2)
xrange <- mean + 5 * sd
pdf <- dweibull(seq(0, xrange, length = 1000), k, lambda)
yrange <- 1.1 * max(pdf)
# create samples
sample <- NULL
while (length(sample) < n) {
x <- runif(1, 0, xrange)
y <- runif(1, 0, yrange)
f <- dweibull(x, k, lambda)
if (y <= f)
sample <- c(sample, x)
}
return(sample)
}
# Compute mean hourly power
samps <- rejectSample(500, k, lambda)
powerSamps <- power(samps)
mean(powerSamps)
powerSamps
samps
power(samps)
rejectSample(1, k, lambda)
power(rejectSample(1, k, lambda))
############################ Solution 1 #######################################
# Function
power <- function(w) {
n <- length(w)
p <- rep(0, n)
for (i in 1:n) {
if (w[i] < 3.5) {
p[i] <- 0
} else if (w[i] <= 14) {
p[i] <- exp(-213.974 * exp(-0.633 * w[i]))
} else if (w[i] < 25) {
p[i] <- 1
} else {
p[i] <- 0
}
}
return(p)
}
powerSamps <- power(samps)
mean(powerSamps)
monte_carlo <- function(m,n,k=1.679,lambda=10.128,f){
mean_power <- rep(0, m)
for (i in 1:m){
wind_samples <- f(n, k, lambda)
mean_power[i] <- mean(P_function(wind_samples))
}
#return(mean_power)
return(sd(mean_power))
}
monte_carlo(500, 100, k, lambda, sample_generator)
estPowerSD <- function(n, m, k, lambda, f) {
means <- rep(0, m)
for (i in 1:m) {
samp <- f(n, k, lambda)
means[i] <- mean(power(samp))
}
return(sd(means))
}
estPowerSD(500, 100, k, lambda, rejectSample)
# Exercise 5b
exercise5 <- function(n, k=1.679, lambda=10.128){
ys <- runif(n)
xs <- qweibull(ys, shape=k, scale=lambda)
return(xs)
}
# Exercise 5c
#Using exercise 5 function to calculate mean power at this site
x_samples <- exercise5(1000)
power <- P_function(x_samples)
mean(power)
# Function
inverseCDFSample <- function(n, k, lambda) {
y <- runif(n)
x <- qweibull(y, k, lambda)
return(x)
}
# Compute mean hourly power
samps <- inverseCDFSample(1000, k, lambda)
powerSamps <- power(samps)
mean(powerSamps)
# Compute mean hourly power
samps <- inverseCDFSample(1000, k, lambda)
samps
powerSamps <- power(samps)
############################ Solution 1 #######################################
# Function
power <- function(w) {
n <- length(w)
p <- rep(0, n)
for (i in 1:n) {
if (w[i] < 3.5) {
p[i] <- 0
} else if (w[i] <= 14) {
p[i] <- exp(-213.974 * exp(-0.633 * w[i]))
} else if (w[i] < 25) {
p[i] <- 1
} else {
p[i] <- 0
}
}
return(p)
}
powerSamps <- power(samps)
mean(powerSamps)
