ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, group=class)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, mappingaes(group=class)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=class))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=class)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=class)) +geom_point() +geom_smooth(se=FALSE, mapping=aes(group=drv, color=class))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=drv)) +geom_point() +geom_smooth(se=FALSE))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy, color=drv)) +geom_point() +geom_smooth(se=FALSE)
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_smooth(se=FALSE)+geom_point(mapping=aes( color=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_smooth(se=FALSE, mapping=aes(linetype=drv))+geom_point(mapping=aes( color=drv))
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +geom_point(mapping=aes( color=drv))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut))
?diamonds
?stat_summary
?stat_summary
?geom_bar
?geom_area
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut))
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),fun.ymin=min,fun.ymax=max,fun.y=median)
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth))
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),fun.ymin=min,fun.ymax=max,fun.y=median)
?geom_pointrange
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),ymin=min,ymax=max)
ggplot(data=diamonds)+stat_summary(mapping=aes(x=cut,y=depth),fun.ymin=min,fun.ymax=max,fun.y=median)
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),fun.min=min,fun.max=max,fun.y=median)
ggplot(data=diamonds)+geom_pointrange(mapping=aes(x=cut,y=depth),ymin=min,ymax=max)
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut))
ggplot(data=diamonds)+geom_col(mapping=aes(x=cut))
ggplot(data=diamonds)+geom_col(mapping=aes(x=cut,y=..prop..))
ggplot(data=diamonds)+geom_col(mapping=aes(x=cut,y=depth))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=depth))
?stat_smooth
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=1))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,fill=color))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,fill=color,group=1))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=2))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=1))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..,group=0))
ggplot(data=diamonds)+geom_bar(mapping=aes(x=cut,y=..prop..))
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar(alpha=1/5,position="identity")
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar()
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar(alpha=1/5,position="identity")
ggplot(data=diamonds,mapping=aes(x=cut,fill=clarity)) + geom_bar(fill=NA,position="identity")
ggplot(data=diamonds,mapping=aes(x=cut,color=clarity)) + geom_bar(fill=NA,position="identity")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="fill")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_point()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
?position_jitter
?geom_jitter
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter(width=0.01)
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter(width=0.1)
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter(width=0.4)
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_jitter()
ggplot(data=mpg,mapping=aes(x=cty,y=hwy)) + geom_count()
?geom_boxplot
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge2")
ggplot(data=diamonds) + geom_bar(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=diamonds) + geom_boxplot(mapping=aes(x=cut,fill=clarity),position="dodge")
ggplot(data=diamonds) + geom_boxplot(mapping=aes(x=cut,fill=clarity),position="dodge2")
ggplot(data=diamonds) + geom_boxplot(mapping=aes(x=cut),position="dodge2")
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot()
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot(position="dodge")
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot(position="dodge2")
ggplot(data=mpg,mapping=aes(x=class,y=hwy)) + geom_boxplot() +coord_flip()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + coord_flip()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + facet_wrap(~clarity)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + facet_wrap(~clarity) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = clarity)) + facet_wrap(~clarity) + coord_polar()
?labs()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar()
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + labs(title="The title of this graph")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + labs(title="The title of this graph") + xlab("Diamond Cut")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + coord_polar() + labs(title="The title of this graph") + xlab("Diamond Cut") + ylab("Y AXISSSS")
?coord_quickmao
?coord_quickmap
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_jitter() + geom_abline()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline() + coord_fixed()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_jitter() + geom_abline()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline() + coord_fixed()
?coord_fixed
?geom_abline
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_abline() + coord_fixed()
?geom_abline
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline() + coord_fixed()
ggplot(data=mpg, mapping = aes(x=cty,y=hwy)) + geom_point() + geom_abline(2) + coord_fixed()
>pie
?pie
this_is_a_really_long_name <- 2.5
this_is_a_really_long_name
this_is_also <- 5
this_is_a_really_long_name <- 3.5
library(tidyverse)
library(nycflights13)
library(nycflights13)
install.packages(nycflights13)
install.package(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
# Exercise 1
P_function <- function(w){
if (w < 3.5 | w > 25) {
P <- 0
} else if (w>=3.5 & w<=14){
P <- exp(-2.13974*exp(-0.633*w))
} else if (w>14 & w<=25){
P <- 1
} else {
print(error)
}
}
P(5)
P_function(5)
return P
return(P)
P <- 0
source("~/Desktop/MT4113/Practical 1/Practical 1.R")
P_function(0)
P_function(5)
P_function(15)
P_function(30)
# Exercise 2
dat <- read.csv("WindData.csv")$speed
setwd("~/Desktop/MT4113/Practical 1")
# Exercise 2
dat <- read.csv("WindData.csv")$speed
# simulate values and plot histogram on probability density scale
x <- rweibull(1000, shape=1.679, scale=10.128)
hist(x, prob = TRUE, ylim = c(0, 0.06))
# simulate values and plot histogram on probability density scale
x <- rweibull(100000, shape=1.679, scale=10.128)
hist(x, prob = TRUE, ylim = c(0, 0.06))
hist(x, prob = TRUE)
# simulate values and plot histogram on probability density scale
x <- rweibull(10000, shape=1.679, scale=10.128)
hist(x, prob = TRUE)
gr <- seq(0, 40, 0.01)
# compute exact PDF on grid and plot
lines(gr, dweibull(gr, shape=1.679, scale=10.128), col = "steelblue", lwd = 1.5)
# Exercise 3a
# attempt 4
sample_generator <- function(n) {
sample <- NULL
while (length(sample) < n) {
x <- runif(1, -20, 20)
y <- runif(1, 0, 0.06)
f <- dweibull(x, shape=1.679, scale=10.128)
if (y <= f) sample <- c(sample, x)
}
return(sample)
}
sample_generator(5)
sample_generator <- function(n, k, lambda) {
sample <- NULL
while (length(sample) < n) {
x <- runif(1, -20, 20)
y <- runif(1, 0, 0.06)
f <- dweibull(x, shape=k, scale=lambda)
if (y <= f) sample <- c(sample, x)
}
return(sample)
}
sample_generator(5, 1.679, 10.128)
mean(1,2,3)
mean(1.0,2.0,3.0)
mean(c(1.0,2.0,3.0))
# Exercise 3a
# attempt 4
sample_generator <- function(n, k=1.679, lambda=10.128) {
sample <- NULL
while (length(sample) < n) {
x <- runif(1, -20, 20)
y <- runif(1, 0, 0.06)
f <- dweibull(x, shape=k, scale=lambda)
if (y <= f) sample <- c(sample, x)
}
return(sample)
}
# Exercise 3b
mean(sample_generator(1000, 1.679, 10.128))
# Exercise 3b
some_samples = sample_generator(1000, 1.679, 10.128)
some_samples
mean(some_samples)
P_function(sample_generator(1000, 1.679, 10.128))
P_function(c(0, 5, 15, 30))
lapply(wind_samples, P_function)
# Exercise 3b
wind_samples = sample_generator(1000, 1.679, 10.128)
lapply(wind_samples, P_function)
mean(lapply(wind_samples, P_function))
apply(lapply(wind_samples, P_function),1, mean)
apply(lapply(wind_samples, P_function),2, mean)
dim(lapply(wind_samples, P_function))
lapply(wind_samples, P_function)
lapply(wind_samples, P_function)[1]
list(lapply(wind_samples, P_function))
typeof(lapply(wind_samples, P_function))
wind_samples = sample_generator(1000, 1.679, 10.128)
power_of_samples = lapply(wind_samples, P_function)
print("The mean time is:")
sapply(power_of_samples, mean)
power_of_samples
power_of_samples[1]
sapply(power_of_samples, mean)[1]
lapply(power_of_samples, mean)
lapply(power_of_samples, mean)[1]
power_of_samples[1]
wind_samples
power_of_samples
sapply(wind_samples, P_function)
power_of_samples = sapply(wind_samples, P_function)
sapply(power_of_samples, mean)
lapply(power_of_samples, mean)
mean(power_of_samples)
power_of_samples
?apply
?lapply
?sapply
?sapply
1:5
sd(power_of_samples)
monte_carlo <- function(m,n,k,lambda){
mean_power <- c()
for (i in 1:m){
wind_samples <- sample_generator(n, k=1.679, lambda=10.128)
power_of_samples <- sapply(wind_samples, P_function)
mean_sample <- mean(power_of_samples)
mean_power <- c(mean_power, mean_sample)
}
return(mean_power)
#return(sd(mean_power))
}
monte_carlo(5,1000)
# Exercise 4
monte_carlo <- function(m,n,k,lambda){
mean_power <- c()
for (i in 1:m){
wind_samples <- sample_generator(n, k=1.679, lambda=10.128)
power_of_samples <- sapply(wind_samples, P_function)
mean_sample <- mean(power_of_samples)
mean_power <- c(mean_power, mean_sample)
}
#return(mean_power)
return(sd(mean_power))
}
# Exercise 4
monte_carlo <- function(m,n,k,lambda){
mean_power <- c()
for (i in 1:m){
wind_samples <- sample_generator(n, k=1.679, lambda=10.128)
power_of_samples <- sapply(wind_samples, P_function)
mean_sample <- mean(power_of_samples)
mean_power <- c(mean_power, mean_sample)
}
#return(mean_power)
return(sd(mean_power))
}
monte_carlo(5,1000)
?runif
runif(5, 0, 1)
qweibull(runif(5, 0, 1))
qweibull(runif(5, 0, 1), shape=1.679, lambda=10.128)
qweibull(runif(5, 0, 1), shape=1.679, scale = 10.128)
# Exercise 5b
exercise5 <- function(n, k=1.679, lambda=10.128){
ys <- runif(n)
xs <- qweibull(ys, shape=k, scale=lambda)
return(xs)
}
# Exercise 5c
#Using exercise 5 function to calculate mean power at this site
x_samples <- exercise5(1000)
power <- sapply(x_samples, P_function)
mean(power)
len(4)
length(4)
P_function <- function(w){
for (i in 1:len(w)){
#P <- 0
if (i < 3.5 | i > 25) {
P <- 0
} else if (i>=3.5 & i<=14){
P <- exp(-2.13974*exp(-0.633*w))
} else if (i>14 & i<=25){
P <- 1
}
}
return(P)
}
P_function(5)
P_function <- function(w){
for (i in 1:length(w)){
#P <- 0
if (i < 3.5 | i > 25) {
P <- 0
} else if (i>=3.5 & i<=14){
P <- exp(-2.13974*exp(-0.633*w))
} else if (i>14 & i<=25){
P <- 1
}
}
return(P)
}
P_function(5)
P_function(c(4,5,30))
P_function(c(0, 5, 20, 30))
P_function <- function(w){
P <- c()
for (i in 1:length(w)){
if (i < 3.5 | i > 25) {
P <- c(P, 0)
} else if (i>=3.5 & i<=14){
P <- c(P, exp(-2.13974*exp(-0.633*w)))
} else if (i>14 & i<=25){
P <- c(P, 1)
}
}
return(P)
}
P_function(c(0, 5, 20, 30))
P_function <- function(w){
P <- c()
for (i in 1:length(w)){
if (i < 3.5 | i > 25) {
P <- c(P, 0)
print(0)
} else if (i>=3.5 & i<=14){
P <- c(P, exp(-2.13974*exp(-0.633*w)))
print(exp(-2.13974*exp(-0.633*w)))
} else if (i>14 & i<=25){
P <- c(P, 1)
print(1)
}
}
return(P)
}
P_function(c(0, 5, 20, 30))
c(0,5,20,30)[1]
c(0,5,20,30)[4]
P_function <- function(w){
P <- c()
for (i in 1:length(w)){
if (w[i] < 3.5 | w[i] > 25) {
P <- c(P, 0)
print(0)
} else if (w[i]>=3.5 & w[i]<=14){
P <- c(P, exp(-2.13974*exp(-0.633*w)))
print(exp(-2.13974*exp(-0.633*w)))
} else if (w[i]>14 & w[i]<=25){
P <- c(P, 1)
print(1)
}
}
return(P)
}
P_function(c(0, 5, 20, 30))
P_function <- function(w){
P <- c()
for (i in 1:length(w)){
if (w[i] < 3.5 | w[i] > 25) {
P <- c(P, 0)
print(0)
} else if (w[i]>=3.5 & w[i]<=14){
P <- c(P, exp(-2.13974*exp(-0.633*w[i])))
print(exp(-2.13974*exp(-0.633*w[i])))
} else if (w[i]>14 & w[i]<=25){
P <- c(P, 1)
print(1)
}
}
return(P)
}
P_function(c(0, 5, 20, 30))
P_function <- function(w){
P <- c()
for (i in 1:length(w)){
if (w[i] < 3.5 | w[i] > 25) {
P <- c(P, 0)
} else if (w[i]>=3.5 & w[i]<=14){
P <- c(P, exp(-2.13974*exp(-0.633*w[i])))
} else if (w[i]>14 & w[i]<=25){
P <- c(P, 1)
}
}
return(P)
}
P_function(c(0, 5, 20, 30))
# Exercise 2
dat <- read.csv("WindData.csv")$speed
# simulate values and plot histogram on probability density scale
x <- rweibull(10000, shape=1.679, scale=10.128)
hist(x, prob = TRUE, xlab='Hourly wind speeds (knots)', ylab='Probability Density')
gr <- seq(0, 40, 0.01)
# compute exact PDF on grid and plot
lines(gr, dweibull(gr, shape=1.679, scale=10.128), col = "steelblue", lwd = 1.5)
# Exercise 3a
# attempt 4
sample_generator <- function(n, k=1.679, lambda=10.128) {
sample <- NULL
while (length(sample) < n) {
x <- runif(1, -20, 20)
y <- runif(1, 0, 0.06)
f <- dweibull(x, shape=k, scale=lambda)
if (y <= f) sample <- c(sample, x)
}
return(sample)
}
# Exercise 3b
wind_samples <- sample_generator(1000, 1.679, 10.128)
power_of_samples <- P_function(wind_samples)
print("The mean time is:")
mean(power)
# Exercise 4
monte_carlo <- function(m,n,k,lambda){
mean_power <- c()
for (i in 1:m){
wind_samples <- sample_generator(n, k=1.679, lambda=10.128)
power_of_samples <- sapply(wind_samples, P_function)
mean_sample <- mean(power_of_samples)
mean_power <- c(mean_power, mean_sample)
}
#return(mean_power)
return(sd(mean_power))
}
# Exercise 5a
#In this method, you pick a random number of the y-axis (between  0   and  1),
# then use the inverse cumulative distribution function to figure out the
# corresponding value on the  x-axis. You take this value as a sample.
#Notice, there is no rejection here, every iteration leads to a sample.
# 1. Use uniform distribution to generate n random samples between 0 and 1
# 2. Use qweibull to find the corresponding values on x-axis
# Exercise 5b
exercise5 <- function(n, k=1.679, lambda=10.128){
ys <- runif(n)
xs <- qweibull(ys, shape=k, scale=lambda)
return(xs)
}
# Exercise 5c
#Using exercise 5 function to calculate mean power at this site
x_samples <- exercise5(1000)
power <- P_function(x_samples)
mean(power)
# Exercise 6
system.time(sample_generator(10000))
system.time(exercise5(10000))
rejection_sample_mc <- monte_carlo(10, 10000)
cdf_method_mc <- monte_carlo(10, 10000)
rejection_sample_mc
cdf_method_mc
monte_carlo_graph <- function(n){
for (i in seq(1, n, 5)){
error <- monte_carlo(m=10, n=i)
print(error)
}
}
monte_carlo_graph(100)
monte_carlo_graph <- function(n){
y <- c()
x <- c()
for (i in seq(1, n, 5)){
error <- monte_carlo(m=10, n=i)
y <- c(y, error)
x <- c(x, i)
}
plot(x,y, type='l', ylab='Monte Carlo Error', xlab='Number of samples')
}
plot(x,y, type='l', ylab='Monte Carlo Error', xlab='Number of samples')
y
# Exercise 7
n = 100
y <- c()
x <- c()
for (i in seq(1, n, 5)){
error <- monte_carlo(m=10, n=i)
y <- c(y, error)
x <- c(x, i)
}
plot(x,y, type='l', ylab='Monte Carlo Error', xlab='Number of samples')
n = 100
y <- c()
x <- c()
for (i in seq(1, n, 5)){
error <- monte_carlo(m=100, n=i)
y <- c(y, error)
x <- c(x, i)
}
plot(x,y, type='l', ylab='Monte Carlo Error', xlab='Number of samples')
plot(x,y, type='b', ylab='Monte Carlo Error', xlab='Number of samples')
plot(x,y, type='b', ylab='Monte Carlo Error', xlab='Number of samples')
lines(y=0.05)
abline(a=0.05)
plot(x,y, type='b', ylab='Monte Carlo Error', xlab='Number of samples')
abline(a=0.05)
plot(x,y, type='b', ylab='Monte Carlo Error', xlab='Number of samples')
abline(h=0.05)
?abline
plot(x,y, type='b', ylab='Monte Carlo Error', xlab='Number of samples')
abline(h=0.05, lty='dotted')
abline(h=0.05, lty='dotted', col='red')
